<?php

/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2016/10/9
 * Time: 16:32
 */
class PlayerTank extends Tank
{
    protected static $concept;
    protected static $id;
    protected static $die;
    protected static $length;
    protected static $width;

    protected static $hp;
    protected static $life;
    protected static $side;
    protected static $is_no_enemy;
    protected static $can_move;
    protected static $can_shoot;

    protected static $x_pos;
    protected static $y_pos;
//    移动速度
    protected static $speed;
//    护甲
    protected static $armor;
//    护甲上限
    protected static $armor_top_limit;
//    普通子弹射击间隔
    protected static $normal_shoot_interval;
//    上次射击时间
    protected static $last_shoot_time;
//    朝向
    protected static $face_to;

    protected $last_move=0;

    /**
     * @return mixed
     */
    public static function getYPos()
    {
        return static::$y_pos;
    }

    public function currentInfoArray()
    {
        $arr = parent::currentInfoArray();
        $arr["mo"] = Market::getMarketInstance()->getPlayerGameMoney($this->getUid());
        return $arr;
    }

    /**
     * @return mixed
     */
    public static function getXPos()
    {
        return static::$x_pos;
    }


    public function destroy($update = true)
    {
        parent::destroy($update); // TODO: Change the autogenerated stub
//        将付费道具剩余数目写进Redis
        $this->recordPayNumbers();
        $this->getMap()->deletePlayerTankIndex($this);
        if (!$this->getMap()->getPlayerTanks()) {
            $this->getMap()->getGame()->destroy();
        }
        
        return $this;
    }

    public function objAddedToMap($map)
    {
        $map->addObjToAllObjContainer($this);
        $map->addObjToMatrix($this, $this->getLength(), $this->getWidth(), $this->x, $this->y, $this->getConcept());
        $map->addObjToPlayerTankContainer($this);
    }

    public function hurt($num,$from_who = null)
    {
        $hp_has_hurt = parent::hurt($num,$from_who); // TODO: Change the autogenerated stub
        if ($hp_has_hurt && $this->isAlive()) {
            $this->reborn()->setDie()->updateMe();
            $this->setDie(false)->updateMe();
            $this->addBuff("NoEnemyBuff")->active();
        }
    }

    public static function getRebornPosition()
    {
        // 被继承，虽然是空的，不要删掉了
    }

    public function reborn()
    {
        $final_x_y = array($this->getXPos(), $this->getYPos());
        $reborn_pos = $this->getRebornPosition();
        $map = $this->getMap();
        $map->setObjectOutOfMatrix($this);
//        对于两个出生点位中的任意一个
        foreach ($reborn_pos as $x_y) {
//            如果这个位置上有碰撞体
            if ($hit_objects = $map->computeCollision($x_y[0], $x_y[1], $this->getWidth(), $this->getLength(), $this->getConcept())) {
                $flag = true;
                foreach ($hit_objects as $hit_obj) {
//                    如果有碰撞体是自己或者是友军
                    if ($this->getId() == $hit_obj->getId() || $this->otherPlayerTank()->getId() == $hit_obj->getId()) {
                        $flag = false;
                        break;
                    }
                }
//                如果没有是友军或者自己
                if ($flag) {
                    foreach ($hit_objects as $hit_obj) {
                        $hit_obj->destroy();
                    }
                    $final_x_y = $x_y;
                    break;
                }
            } else {
                break;
            }
        }

        $this->setX($final_x_y[0]);
        $this->setY($final_x_y[1]);
        $map->addObjToMatrix($this, $this->getLength(), $this->getWidth(), $final_x_y[0], $final_x_y[1], $this->getConcept());
        return $this;
    }

    public function otherPlayerTank()
    {
        /** @var PlayerTank $each_player_tank */
        foreach ($this->getMap()->getPlayerTanks() as $each_player_tank) {
            if ($each_player_tank->getId() != $this->getId()) {
                return $each_player_tank;
            }
        }
        return $this;
    }

    public function getCanMove()
    {
        return parent::getCanMove() && (getMillisecond() > $this->getSpeedCold() + $this->getLastMove() - 20);
    }

    /**
     * @param mixed $last_move
     *
     * @return PlayerTank
     */
    public function setLastMove($last_move)
    {
        $this->last_move = $last_move;
        return $this;
    }

    /**
     * @return mixed
     */
    public function getLastMove()
    {
        return $this->last_move;
    }

    public function getSpeedCold()
    {
        return 300 - ($this->getSpeed() - 1) * 100;
    }

    function move($po)
    {
        $return_result = parent::move($po); // TODO: Change the autogenerated stub
        if ($return_result){
            $this->setLastMove(getMillisecond());
        }
        return $return_result;
    }

    public function getUid()
    {
        /** @var Tank $each_tank */
        foreach ($this->getMap()->getPlayerTanks() as $uid => $each_tank) {
            if ($each_tank->get_Id() == $this->get_Id()) return $uid;
        }
    }

    public function recordPayNumbers()
    {
        $this->savePayFollowBulletNum();
        $this->savePayMineNum();
    }
    public function savePayFollowBulletNum(){
        $market = Market::getMarketInstance();
        $id = $this->getUid();
        $class_name = PayFollowBullet::class;
        $num = $this->getPayFollowBulletNum();
//            如果他买了跟踪子弹
        if (key_exists($class_name, $market->getItemsHeBought($id))) {
            $market->savePayItemNum($id, $class_name, $num);
//                如果用完了就清除道具记录
            if ($num <= 0)
                $market->removeItemBought($id, $class_name);
        }
    }
    public function savePayMineNum(){
        $market = Market::getMarketInstance();
        $id = $this->getUid();
        $class_name = PayMine::class;
        $num = $this->getPayFollowBulletNum();
//            如果他买了地雷堆
        if (key_exists($class_name, $market->getItemsHeBought($id))) {
            $market->savePayItemNum($id, $class_name, $this->getPayFollowBulletNum());
//                如果用完了就清除道具记录
            if ($num <= 0)
                $market->removeItemBought($id, $class_name);
        }
    }

    public function getPayItemNumFromRedis($item_class_name)
    {
        $items = Market::getMarketInstance()->getItemsHeBought($this->get_Id());
        if (isset($items[$item_class_name])) {
            /** @var MarketItem $item */
            $item = $items[$item_class_name];
            return $item->getNum();
        }else
            return 0;
    }

}